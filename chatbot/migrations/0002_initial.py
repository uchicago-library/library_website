# Generated by Django 5.0.10 on 2025-05-07 17:07

import base.models
import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("chatbot", "0001_initial"),
        ("staff", "0029_alter_staffindexpage_editor_and_more"),
        ("units", "0016_alter_unitindexpage_editor_and_more"),
        ("wagtailcore", "0093_uploadedfile"),
        ("wagtailimages", "0026_delete_uploadedimage"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChatbotPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("start_sidebar_from_here", models.BooleanField(default=False)),
                ("show_sidebar", models.BooleanField(default=False)),
                (
                    "last_reviewed",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last Reviewed"
                    ),
                ),
                ("quicklinks", wagtail.fields.RichTextField(blank=True)),
                ("quicklinks_title", models.CharField(blank=True, max_length=100)),
                (
                    "view_more_link",
                    models.URLField(blank=True, default="", max_length=255),
                ),
                ("view_more_link_label", models.CharField(blank=True, max_length=100)),
                ("change_to_callout", models.BooleanField(default=False)),
                ("display_hours_in_right_sidebar", models.BooleanField(default=False)),
                ("enable_index", models.BooleanField(default=False)),
                ("display_hierarchical_listing", models.BooleanField(default=False)),
                (
                    "exclude_from_search_engines",
                    models.BooleanField(
                        default=False,
                        help_text="Tells search engines not to index the page with a meta robots noindex tag",
                    ),
                ),
                (
                    "exclude_from_site_search",
                    models.BooleanField(
                        default=False,
                        help_text="Excludes the page from the public site search",
                    ),
                ),
                (
                    "exclude_from_sitemap_xml",
                    models.BooleanField(
                        default=False,
                        help_text="Excludes the page from the Google sitemap.xml",
                    ),
                ),
                (
                    "events_feed_url",
                    models.URLField(
                        blank=True, help_text="Link to a Tiny Tiny RSS Feed"
                    ),
                ),
                ("banner_title", models.CharField(blank=True, max_length=100)),
                ("banner_subtitle", models.CharField(blank=True, max_length=100)),
                (
                    "news_feed_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "--------"),
                            ("library_kiosk", "Library"),
                            ("law_kiosk", "Law"),
                            ("sciences_kiosk", "Sciences"),
                            ("scrc_kiosk", "SCRC"),
                            ("cds_kiosk", "CDS"),
                        ],
                        default="",
                        max_length=50,
                    ),
                ),
                (
                    "external_news_page",
                    models.URLField(
                        blank=True,
                        help_text="Link to an external news page, e.g. wordpress",
                    ),
                ),
                ("rich_text_heading", models.CharField(blank=True, max_length=25)),
                (
                    "rich_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Should be a bulleted list or combination of h3 elements and bulleted lists",
                    ),
                ),
                (
                    "rich_text_external_link",
                    models.URLField(
                        blank=True,
                        help_text="Optional external link that displays next to the heading",
                    ),
                ),
                (
                    "rich_text_link_text",
                    models.CharField(
                        blank=True,
                        help_text="Display text for the rich text link",
                        max_length=25,
                    ),
                ),
                (
                    "link_queue",
                    wagtail.fields.StreamField(
                        [("spreadsheet", base.models.LinkQueueSpreadsheetBlock())],
                        blank=True,
                        default="",
                        help_text='Spreadsheets should be .xlsx files with the following headers: "Start Date", "End Date", "Link Text", and "URL"',
                    ),
                ),
                ("display_current_web_exhibits", models.BooleanField(default=False)),
                (
                    "cgi_mail_form",
                    models.TextField(
                        blank=True,
                        help_text="JSON representing the fields of a form. Must follow a strict schema. Contact DLDC for help with this",
                    ),
                ),
                (
                    "cgi_mail_form_thank_you_text",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Text to display after the form has been submitted",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True)),
                (
                    "banner_feature",
                    models.ForeignKey(
                        blank=True,
                        help_text="Banner feature images should be approximately 500 × 500 pixels",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "banner_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Banners should be approximately 1200 × 200 pixels",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "content_specialist",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_content_specialist",
                        to="staff.staffpage",
                    ),
                ),
                (
                    "editor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_editor",
                        to="staff.staffpage",
                    ),
                ),
                (
                    "internal_news_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to an internal news page",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "page_maintainer",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_maintainer",
                        to="staff.staffpage",
                    ),
                ),
                (
                    "rich_text_link",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional link that displays next to the heading",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        limit_choices_to={"display_in_dropdown": True},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_related",
                        to="units.unitpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
    ]
